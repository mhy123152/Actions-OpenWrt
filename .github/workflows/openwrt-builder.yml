#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v23.05.3
  TARGET: x86/64
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_HOST: https://github.com/mhy123152/Actions-OpenWrt/releases/download
  DEVICE_NAME:
  FILE_DATE:  
  FIRMWARE:
  PREFIX:

jobs:
  build:
    name: Build Openwrt
    runs-on: ubuntu-24.04
    outputs:
      release_tag: ${{ steps.tag.outputs.release_tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        # sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
        python3-setuptools rsync swig unzip zlib1g-dev file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        # make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    # - name: Delete workflow runs
    #   uses: Mattraks/delete-workflow-runs@main
    #   with:
    #     retain_days: 0
    #     keep_minimum_runs: 2

    # - name: Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@master
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   with:
    #     keep_latest: 3
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  generate_matrix:
    name: Set matrix
    runs-on: ubuntu-latest
    outputs:
      imagebuilders: ${{ steps.find_targets.outputs.imagebuilders }}
      rootfs: ${{ steps.find_targets.outputs.rootfs }}
      sdks: ${{ steps.find_targets.outputs.sdks }}
      ref: ${{ steps.find_targets.outputs.ref }}
      version: ${{ steps.find_targets.outputs.version }}
      version_path: ${{ steps.find_targets.outputs.version_path }}
      file_host: ${{ steps.find_targets.outputs.file_host }}

    steps:
      - name: Set release manually
        run: |
          export REF=${{ env.REPO_BRANCH }}
          echo "REF=$REF" >> "$GITHUB_ENV"

          case $REF in
            main)
              VERSION=SNAPSHOT
              echo "VERSION_PATH=snapshots" >> "$GITHUB_ENV"
            ;;
            openwrt-*)
              VERSION=${REF//openwrt-/}-SNAPSHOT
              echo "VERSION_PATH=releases/$VERSION" >> "$GITHUB_ENV"
            ;;
            v*)
              VERSION=${REF//v/}
              echo "VERSION_PATH=releases/$VERSION" >> "$GITHUB_ENV"
            ;;
            *)
              echo "No tag or branch found"
              exit 1
            ;;
          esac

          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ env.REPO_BRANCH }}

      - name: Set targets
        id: find_targets
        run: |
          # TARGET_FILTER="x86/64"
          TARGET_FILTER=${{ env.TARGET }}

          # imagebuilders & rootfs
          JSON_IB='['
          FIRST_IB=1

          JSON_ROOTFS='['
          FIRST_ROOTFS=1

          while read -r line;
          do
            TARGET=$(echo "$line" | cut -d " " -f 1)
            ARCH=$(echo "$line" | cut -d " " -f 2)

            [[ $FIRST_IB -ne 1 ]] && JSON_IB="$JSON_IB"','
            FIRST_IB=0

            JSON_IB="$JSON_IB"'{"target":"'"$TARGET"'"}'

            case "$TARGET" in
              x86/*|arm*|malta/be|mvebu/cortexa9)
                [[ $FIRST_ROOTFS -ne 1 ]] && JSON_ROOTFS="$JSON_ROOTFS"','
                FIRST_ROOTFS=0

                JSON_ROOTFS="$JSON_ROOTFS"'{"target":"'"$TARGET"'","arch":"'"$ARCH"'"}'
              ;;
            esac

          done <<< $(perl ./scripts/dump-target-info.pl targets 2>/dev/null | grep "$TARGET_FILTER")

          JSON_IB='{"include":'"$JSON_IB"']}'
          echo -e "\n---- imagebuilders ----\n"
          echo "$JSON_IB" | jq
          echo -e "\n---- imagebuilders ----\n"
          echo "imagebuilders=$JSON_IB" >> "$GITHUB_OUTPUT"

          JSON_ROOTFS='{"include":'"$JSON_ROOTFS"']}'
          echo -e "\n---- rootfs ----\n"
          echo "$JSON_ROOTFS" | jq
          echo -e "\n---- rootfs ----\n"
          echo "rootfs=$JSON_ROOTFS" >> "$GITHUB_OUTPUT"

          # sdks
          JSON='['
          FIRST=1

          while read -r line;
          do
            ARCH=$(echo "$line" | cut -d " " -f 1)
            [ -z "$TARGET_FILTER" ] && TARGET=$(echo "$line" | cut -d " " -f 2) || TARGET="$TARGET_FILTER"
            TARGETS=$(echo "$line" | cut -d " " -f 2- | sed -e 's/ /\\n/g')

            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            FIRST=0

            JSON="$JSON"'{"arch":"'"$ARCH"'","target":"'"$TARGET"'","tags":"'"$ARCH"'\n'"$TARGETS"'"}'
          done <<< $(perl ./scripts/dump-target-info.pl architectures 2>/dev/null | grep "$TARGET_FILTER")

          JSON='{"include":'"$JSON"']}'
          echo -e "\n---- sdks ----\n"
          echo "$JSON" | jq
          echo -e "\n---- sdks ----\n"
          echo "sdks=$JSON" >> "$GITHUB_OUTPUT"

          echo "ref=${REF:-main}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION:-SNAPSHOT}" >> "$GITHUB_OUTPUT"
          echo "version_path=${VERSION_PATH:-snapshots}" >> "$GITHUB_OUTPUT"

          FILE_HOST=${{ env.FILE_HOST }}
          
          # echo "file_host=${FILE_HOST:-mirror-03.infra.openwrt.org}" >> "$GITHUB_OUTPUT"
          echo "file_host=$FILE_HOST" >> "$GITHUB_OUTPUT"

  push-rootfs-container:
      name: RootFS
      runs-on: ubuntu-latest
      needs: [generate_matrix, build]
      if: needs.generate_matrix.outputs.rootfs != '{"include":[]}'
      strategy:
        fail-fast: False
        matrix: ${{fromJson(needs.generate_matrix.outputs.rootfs)}}

      steps:
        - name: Set up QEMU
          run: |
            sudo apt-get update
            sudo apt-get install -y qemu-user-static binfmt-support
            sudo update-binfmts --import

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to GitHub Container Registry
          if: github.event_name != 'pull_request'
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Login to Docker.io Container Registry
          if: github.event_name != 'pull_request'
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USER }}
            password: ${{ secrets.DOCKER_TOKEN }}

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: |
              ghcr.io/mhy123152/openwrt-rootfs
              docker.io/mhy123152/openwrt-rootfs
            flavor: |
              latest=false
              prefix=${{ env.PREFIX }}
            tags: |
              ${{ matrix.target }}-${{ needs.generate_matrix.outputs.ref }}
              ${{ matrix.target }}-${{ needs.generate_matrix.outputs.version }}
              ${{ matrix.target }}-master,enable=${{ needs.generate_matrix.outputs.ref == 'main' }}
              ${{ matrix.target }},enable=${{ needs.generate_matrix.outputs.version == 'SNAPSHOT' }}
              ${{ matrix.arch }}-${{ needs.generate_matrix.outputs.ref }}
              ${{ matrix.arch }}-${{ needs.generate_matrix.outputs.version }}
              ${{ matrix.arch }}-master,enable=${{ needs.generate_matrix.outputs.ref == 'main' }}
              ${{ matrix.arch }},enable=${{ needs.generate_matrix.outputs.version == 'SNAPSHOT' }}
              latest,enable=${{ needs.generate_matrix.outputs.version == 'SNAPSHOT' && matrix.target == 'x86/64'}}

        - name: Download artifact
          uses: actions/download-artifact@v4
          with:
            name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
            path: $GITHUB_WORKSPACE/

        - name: Prepare build
          id: prebuild
          run: |
            cd $GITHUB_WORKSPACE/dockerx86
            cp ${{ env.FIRMWARE }}/openwrt-x86-64-generic-rootfs.tar.gz $GITHUB_WORKSPACE/dockerx86/
            mv openwrt-x86-64-generic-rootfs.tar.gz openwrt-x86-64-default-rootfs.tar.gz  
            chmod +x $DOCKER_BUILD_SH
            ./$DOCKER_BUILD_SH
            mkdir dockerbuild
            gzip -dc docker-img-openwrt-x86-latest.gz > ./dockerbuild
            cd dockerbuild
            echo "FIRMWARE_PATCHED=$PWD" >> $GITHUB_OUTPUT

        - name: Push
          if: github.event_name != 'pull_request'
          uses: docker/build-push-action@v6
          with:
            context: ${{ steps.prebuild.outputs.FIRMWARE_PATCHED }}
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            platforms: linux/${{ matrix.arch }}